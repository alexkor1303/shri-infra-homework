name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci

      - name: Run linter and tests
        run: |
          npm run lint &
          npm test &
          wait

      - name: Create release branch
        run: |
          git checkout -b releases/${{ github.run_number }} main
          git push --set-upstream origin releases/${{ github.run_number }}

      - name: Build Docker image
        run: |
          docker build -t cr.yandex/${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }} .
          docker tag cr.yandex/${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }} cr.yandex/${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }}_latest

      - name: Login to Yandex Container Registry
        env:
          YANDEX_OAUTH_TOKEN: ${{ secrets.YANDEX_OAUTH_TOKEN }}
        run: |
          echo $YANDEX_OAUTH_TOKEN | docker login --username oauth --password-stdin cr.yandex

      - name: Push Docker image
        run: |
          docker push cr.yandex/${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }}
          docker push cr.yandex/${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }}_latest

      - name: Tag release
        run: |
          git tag v${{ github.run_number }}
          git push origin v${{ github.run_number }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Configure Git
        run: |
          git config --global user.email "${{ github.actor }}@example.com"
          git config --global user.name "${{ github.actor }}"

      - name: Get previous tag
        id: prev_tag
        run: echo "::set-output name=prev_tag::$(git describe --tags --abbrev=0 HEAD^)"

      - name: Get commit list
        id: commits
        run: echo "::set-output name=commits::$(git log --pretty=format:'%h - %s' ${{ steps.prev_tag.outputs.prev_tag }}..HEAD)"

      - name: Update CHANGELOG.md
        run: |
          echo "## Release ${{ github.run_number }} by ${{ github.actor }}" >> CHANGELOG.md
          echo "Date: $(date)" >> CHANGELOG.md
          echo "Commits:" >> CHANGELOG.md
          echo "${{ steps.commits.outputs.commits }}" >> CHANGELOG.md
          echo "Docker Image: cr.yandex/${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }}" >> CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for release ${{ github.run_number }} by ${{ github.actor }}"
          git push --set-upstream origin releases/${{ github.run_number }}

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --title "Update CHANGELOG for release ${{ github.run_number }}" --body "Automated PR for updating CHANGELOG for release ${{ github.run_number }}" --base main --head releases/${{ github.run_number }}

      - name: Merge Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --head releases/${{ github.run_number }} --json number --jq '.[0].number')
          gh pr merge $PR_NUMBER --admin --squash --delete-branch
